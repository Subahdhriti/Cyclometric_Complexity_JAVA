/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//Limitaions:  1. Conver Switch case statement to if else ladder if switch exist in your Program.
//             2. Put only else after end of if else ladder...if no need of that else then also you have to put.
//             3. Lines of Code must be less than 100.
//             4. There must be space before and after if statement, before else if statement and before else statement.
//             5. There must be space before and after while,do  and for statement.
//             6. You can't use any userdefined function ...you have to write your code in main function only.
//             7. You can not give the closing parenthesis of main function.
// Need to test this program.
package cyclomatic;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JOptionPane;


public class cyclomatic extends javax.swing.JFrame {

    /**
     * Creates new form Graph
     */
    String[] g = new String[500];
    int j=0;
    public Graph() {
        initComponents();
        jButton2.setVisible(false);
        //  jTextField1.setSize(new Dimension(200,300));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setText("Cyclometic Complexity");

        jButton1.setText("Evaluate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Show Cyclometic Complexity");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Write your Code here:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(jLabel1)
                        .addContainerGap(339, Short.MAX_VALUE))
                    .addComponent(jTextField1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       String[] s = new String[1];
       String Close=""; //Used to know which statement is lies inside which statement.
      // String[] g = new String[500];
       int i,l=0,c=0;
       //l=Close.length();
       //jTextField1.setPreferredSize(new Dimension(int 20, int 30));
       //jTextField1 = new jTextField1 ("", 20);
      //   g[j]="0"+Close.substring(l-1,l);
       //  System.out.println(g[j]+" "+l);
         // Close=Close.substring(0,l-1);
          //System.out.print(Close);
// 1. create JTextField
//jTextField1= new jTextField1();
// 2. store default height
      //  double x=jTextField1.getSize().getHeight();
        //double defaultHeight = Double.parseDouble(jTextField1.getSize().getHeight());
// 3. set custom width and default height
//normal=0,if=1,for,while,do while=2
       // jTextField1.setSize(new Dimension(400,300));
      //  x.setSize(new Dimension(20, 30));
       s[0]=jTextField1.getText();
       for(i=0;i<s[0].length();i++){//to know length of program    
       }
       j=0;
       String[] prgm = new String[i];
       for(i=0;i<s[0].length();i++)
       {
        prgm[i]=s[0].substring(i,i+1);// Storing each character of program to array
        l=Close.length();//find length of Close variable ...used to determine nesting
      // System.out.print("l"+l);
           if(prgm[i].equals(";") || prgm[i].equals("{")){//Check normal statement termination.
               if(l==0){
                    g[j]="N "+"0";
                    j++; 
               }
               else{
                   if(c==0)//if c==0 then one character otherwise two character.
                   {
                    g[j]=Close.substring(l-1,l)+" 0";
                    j++;
                   }
                   else{
                    g[j]=Close.substring(l-2,l)+"0";
                    j++;
                   }
               }
                //System.out.print(g[j-1]+" "+Close);
           }
           if((i+7)<s[0].length() && (i-1)>=0){
          //  System.out.print(s[0].substring(i-1,i+3)+ "space ");
               // if(prgm[i].equals("i") && prgm[i+1].equals("f") && prgm[i-1].equals(" ") && prgm[i+2].equals(" ")){//check if statement
             if((s[0].substring(i-1,i+3)).equals(" if ")){ 
               if(l==0){
                    g[j]="N "+"1";
                    j++; 
               }
               else{
                    if(c==0)
                   {
                    g[j]=Close.substring(l-1,l)+" 1";
                    j++;
                   }
                   else{
                    g[j]=Close.substring(l-2,l)+"1";
                    j++;
                   }
               }
               if((j-1)>9)
                   c++;
               Close=Close+(j-1);
               //System.out.print(g[j-1]+" "+Close);
             }
             else if((s[0].substring(i-1,i+7)).equals(" else if") ||(s[0].substring(i-1,i+4)).equals(" else") ){ 
               if(l==0){
                    g[j]="N "+"e";
                    j++; 
               }
               else{
                   if(c==0)
                   {
                    g[j]=Close.substring(l-1,l)+" e";
                    j++;
                   }
                   else{
                    g[j]=Close.substring(l-2,l)+"e";
                    j++;
                   }
               }
               if((j-1)>9)
                   c++;
               Close=Close+(j-1);
                //System.out.print(g[j-1]+" "+Close);
             }
              
           }
           if((i+6)<s[0].length() && (i-1)>=0){
             if((s[0].substring(i-1,i+6)).equals(" while ") || (s[0].substring(i-1,i+4)).equals(" for ") || (s[0].substring(i-1,i+3)).equals(" do ")){
               if(l==0){
                    g[j]="N "+"2";
                    j++; 
               }
               else{
                  if(c==0)
                   {
                    g[j]=Close.substring(l-1,l)+" 2";
                    j++;
                   }
                  else{
                    g[j]=Close.substring(l-2,l)+"2";
                    j++;
                   }
               }
               if((j-1)>9)
                   c++;
               Close=Close+(j-1);
               // System.out.print(g[j-1]+" "+Close);
             }
           }
          
           if(prgm[i].equals("}")){
                if(c==0)
                 {
                    if(l!=0){
                      g[j]=Close.substring(l-1,l)+" c";
                      j++;
                      Close=Close.substring(0,l-1);
                    }
                    //c--;
                 }
                 else{
                  //  System.out.print(" "+Close+" "+j+" "+l);
                    g[j]=Close.substring(l-2,l)+"c";
                    j++;
                    Close=Close.substring(0,l-2);
                    c=c-1;
                 }
             //  System.out.print(g[j-1]+" "+Close);
           }
       }
       for(i=0;i<j;i++){
           System.out.print(g[i]+" ");
       }
        JFrame frame = new JFrame("Control Flow Graph.");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().add(new MyPanel());
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    int edge=0,node=0;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int vg=0;
        vg=(edge/2)-node+2;//i dont know why edge is divided by 2....
        JOptionPane.showMessageDialog(null," Cyclometic Complexity of this Program is: "+vg+".");   
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Graph().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
class MyPanel extends JPanel
{
    MyPanel()
    {  
        setBackground(Color.WHITE);
        setPreferredSize(new Dimension(1400,700));
    }

    public void paintComponent(Graphics page)
    {
        super.paintComponent(page); 
        page.setColor(Color.BLACK);
        page.drawRect(0, 0, 1500, 1500);
        page.fillRect(0,0,1500,1500);
        int i,x=50,y=350,c=0,k=0,flag,ifn=0,ifs=0,mx=-1,q=0,f=0,z=0;
        String Vx="",str="";
        int[] fy = new int[50];
        int[] fx = new int[50];
        int[] s=new int[50];
        int[] b=new int[50];
        int[] t=new int[50];
        int[][] l=new int[50][50];
        for(c=0;c<50;c++){
           for(k=0;k<50;k++){
             l[c][k]=0;
           }
        }
        c=0;k=0;
        int[] count=new int[50];
        String[] m=new String[50];
        String[] n=new String[50];
        page.setColor(Color.WHITE);
        node=j;
        for(i=0;i<j;i++){
            Vx=""+(i+1);
           
            if(g[i].substring(0,2).equals("N ")){
                if(g[i].substring(2,3).equals("1")){
                  page.drawOval(x-5, y-15, 20, 20);
                  page.drawString(Vx, x, y);
                  fy[c]=y+30;
                  fx[c]=x+30;
                  ifn=c;
                  m[c]=""+i;//only for if
                  n[c]=""+i;//both for if and else
                  c++;
                  s[q]=1;
                  t[q]=0;
                  count[q]=30;
                  q++;
                  page.drawLine(x+15, y-5, fx[c-1]-5, fy[c-1]-5);
                  edge++;
                  x=x+30;
                }
                else if(g[i].substring(2,3).equals("e")){
                    c++;
                    if(s[q-1]==2){//s is for 2 coordinates one for up and one for down.
                      s[q-1]=0;
                      count[q-1]=count[q-1]+30; //count will give actual coordinate who will play with y.
                    }  
                    if(t[q-1]%2==0){  //t is used to make coordination between if and else.
                        fy[c]=y-count[q-1];
                        fx[c]=fx[ifn];
                        m[c]=" ";
                        n[c]=""+i;
                        c++;
                    }
                    else{
                        fy[c]=y+count[q-1];
                        fx[c]=fx[ifn];
                        m[c]=" "; //m is storing program line number with coordinates fx and fy.
                        n[c]=""+i;
                        c++;
                    }
                    x=fx[ifn];
                    page.drawOval(fx[c-1]-5,fy[c-1]-15,20,20);
                    page.drawString(Vx, fx[c-1], fy[c-1]);
                    page.drawLine(fx[c-1]-5,fy[c-1]-5,fx[ifn]-30+15,fy[ifn]-30-5);//to if
                    page.drawLine(fx[c-1]+25, fy[c-1]-5, fx[c-1]+15, fy[c-1]-5);// move forward
                    edge=edge+2;
                    s[q-1]++; 
                    t[q-1]++;
                    x=x+30;
                }
                else if(g[i].substring(2,3).equals("2")){
                    page.drawOval(x-5,y-15,20,20);
                    page.drawString(Vx, x, y);
                    fx[c]=x+30;  
                    fy[c]=y+30;
                    m[c]=" ";
                    n[c]=" ";
                    c++;
                    page.drawLine(x+15, y-5, fx[c-1]-5, fy[c-1]-5);
                    edge++;
                    x=x+30;
                }
                else if(g[i].substring(2,3).equals("0")){
                    page.drawOval(x-5,y-15,20,20);
                    page.drawString(Vx, x, y);
                    if(j-1!=i){
                     page.drawLine(x+15,y-5,x+25,y-5);
                     edge++;
                    }
                    x=x+30;
                }
               //Nc cannot be possible  here.x,y,i,j,count,c,t,s
            }
            else{
                if(g[i].substring(2,3).equals("1")){
                  page.drawString(Vx, x, fy[c-1]);
                  page.drawOval(x-5,fy[c-1]-15,20,20);
                  fy[c]=fy[c-1]+30;
                  fx[c]=x+30;
                  m[c]=""+i;
                  n[c]=""+i;
                  c++;
                  s[q]=1;
                  t[q]=0;
                  count[q]=30;
                  q++;
                  page.drawLine(x+15, fy[c-1]-30-5, fx[c-1]-5, fy[c-1]-5);
                  edge++;
                  x=x+30;   
                }
                else if(g[i].substring(2,3).equals("e")){
                  //  System.out.print(Vx);
                    c++;
                    for(k=c-1;k>=0;k--){
                      if(!(m[k].equals(" "))){
                         ifs=k;//ifs will tell me x axis of current line of program.
                         break;
                       } 
                    }
                    if(s[q-1]==2){//s is for 2 coordinates one for up and one for down.
                      s[q-1]=0;
                      count[q-1]=count[q-1]+30; //count will give actual coordinate who will play with y.
                    }  
                    if(t[q-1]%2==0){  //t is used to make coordination between if and else.
                        fy[c]=(fy[ifs]-30)-count[q-1];
                        fx[c]=fx[ifs];
                        m[c]=" ";
                        n[c]=""+i;
                        c++;
                    }
                    else{
                        fy[c]=(fy[ifs]-30)+count[q-1];
                        fx[c]=fx[ifs];
                        m[c]=" "; //m is storing program line number with coordinates fx and fy.
                        n[c]=""+i;
                        c++;
                    }
                    x=fx[ifs];
                    page.drawOval(fx[c-1]-5,fy[c-1]-15,20,20);
                    page.drawString(Vx, fx[c-1], fy[c-1]);
                    page.drawLine(fx[ifs]-30+15,fy[ifs]-30-5,fx[c-1]-5,fy[c-1]-5);//to if
                    page.drawLine(fx[c-1]+15, fy[c-1]-5, fx[c-1]+25, fy[c-1]-5);// move forward
                    edge=edge+2;
                    s[q-1]++; 
                    t[q-1]++;
                    x=x+30;
                }
                else if(g[i].substring(2,3).equals("c")){
                    for(k=c-1;k>=0;k--){
                       if(!(m[k].equals(" "))){
                          ifs=k;//ifs will tell me x axis of current line of program.
                          break;
                        } 
                    }
                    int bb=0;
                    c--;flag=0;
                    for(z=0;z<=i;z++){
                        str=""+z;
                        if(n[c].equals(str)){
                            bb=1;
                            break;//i got index value of g[i] whose closing is that index which i got and z hold that.
                        }
                    }
                    if(bb==1){
                       if(g[z].substring(2,3).equals("1") || g[z].substring(2,3).equals("e")){
                           if(mx<x)
                              mx=x;
                           if(q!=0){
                             for(k=0;l[k][q-1]!=0;k++);
                             if(g[z].substring(2,3).equals("e")){
                                  if(j-1!=i){
                                      if(!(g[i+1].substring(2,3).equals("e"))){
                                          l[k][q-1]=x-25;
                                        }
                                      else{
                                          l[k][q-1]=x+5;
                                      }
                                    }
                                  else if(j-1==i){
                                     l[k][q-1]=x-25; 
                                  }
                                  l[k+1][q-1]=fy[c];
                                }
                             else{
                                 l[k][q-1]=x;
                                 l[k+1][q-1]=fy[c]-30;
                               }
                           }
                          if(j-1!=i){
                              if(!(g[i+1].substring(2,3).equals("e"))){
                                  flag=1;
                                  b[q-1]++;//counting how many if else ladder is there.
                                }
                              else{
                                  b[q-1]++; 
                                }
                            }
                           if(j-1==i){
                               flag=1;
                               b[q-1]++;  
                            }
                       }  
                    }
                    if(flag==1){
                        x=mx+30;
                        mx=-1;
                        q--;
                    }
                    for(k=0;k<i;k++){
                        if(g[i].substring(1,2).equals(" "))
                          str=""+k+" "; 
                        else
                          str=""+k;
                        if(g[i].substring(0,2).equals(str)){
                            if(g[k].substring(2,3).equals("1")){
                                if(flag==1){
                                    //System.out.print(g[i]+b[q]+" ");
                                    x=x-30;
                                    page.drawOval(x-5,fy[ifs]-15-30,20,20);
                                    page.drawString(Vx, x, fy[ifs]-30);
                                    if(j-1!=i){
                                      if(!(g[i+1].substring(2,3).equals("c"))){
                                         page.drawLine(x+15,fy[ifs]-30-5,x+25,fy[ifs]-30-5);//forward edge
                                         edge++;
                                       }
                                    }
                                    page.drawLine(x-5, fy[ifs]-30,fx[ifs] ,fy[ifs]-30);
                                    page.drawLine(x-25+10, fy[c]-5, x-15+10, fy[c]-30);
                                    edge=edge+2;
                                }
                                else{
                                  page.drawLine(x-25+10, fy[c], x-15+10, fy[c]-30);
                                  edge++;
                                  page.drawOval(x-5,fy[c]-15-30,20,20);
                                  page.drawString(Vx,x , fy[c]-30);
                                }
                            }
                            else if(g[k].substring(2,3).equals("2")){
                                 page.drawOval(x-5,fy[c]-15-30,20,20);
                                 page.drawString(Vx,x , fy[c]-30);
                                 if(j-1!=i){
                                      if(!(g[i+1].substring(2,3).equals("c"))){
                                           page.drawLine(x+15,fy[c]-30-5,x+25,fy[c]-30-5);
                                           edge++;
                                        }
                                    }
                                 page.drawLine(x-5, fy[c]-30, fx[c], fy[c]-30);
                                 page.drawLine(x-30+15,fy[c]-5,x-30+15,fy[c]-5-10+30);
                                 page.drawLine(x-30+15,fy[c]-5-10+30,fx[c]-15,fy[c]-5-10+30);
                                 page.drawLine(fx[c]-15,fy[c]-5-10+30,fx[c]-15,fy[c]-5-30);
                                 edge=edge+2;
                            }
                            else if(g[k].substring(2,3).equals("e")){
                                c--;
                                if(flag==1){ 
                                    page.drawOval(x-5,fy[ifs]-15-30,20,20);
                                    page.drawString(Vx, x, fy[ifs]-30);
                                    z=0;
                                    for(f=0;f<b[q];f++){
                                        page.drawLine(x-5, fy[c]-30-5,l[z][q]+15 , l[z+1][q]-5);
                                        edge++;
                                        z=z+2;
                                    }
                                    //System.out.print(b[q]);
                                    if(j-1!=i){
                                      if(!(g[i+1].substring(2,3).equals("c"))){
                                           page.drawLine(x+15, fy[c]-30-5, x+25, fy[c]-30-5);
                                           edge++;
                                        }
                                    }
                                }
                                else{
                                  //  System.out.print(fy[c+1]);
                                   page.drawLine(x-25+10, fy[c+1]-5, x-15+10, fy[c+1]-5);
                                   edge++;
                                   page.drawOval(x-5,fy[c+1]-15,20,20);
                                   page.drawString(Vx,x , fy[c+1]);
                                }
                            }
                            break;
                        }
                    }
                    x=x+30;
                }
                else if(g[i].substring(2,3).equals("2")){
                    page.drawOval(x-5,fy[c-1]-15,20,20);
                    page.drawString(Vx, x, fy[c-1]);
                    fx[c]=x+30;  
                    fy[c]=fy[c-1]+30;
                    m[c]=" ";
                    n[c]=" ";
                    c++;
                    page.drawLine(fx[c-1]-30+15, fy[c-1]-30-5, fx[c-1]-5, fy[c-1]-5);
                    edge++;
                    x=x+30;
                }
                else if(g[i].substring(2,3).equals("0")){
                    page.drawOval(x-5,fy[c-1]-15,20,20);
                    page.drawString(Vx, x, fy[c-1]);
                    if(!(g[i+1].substring(2,3).equals("c")) && j-1!=i){
                       page.drawLine(x+15, fy[c-1]-5, x+25, fy[c-1]-5);
                       edge++;
                    }
                    x=x+30;
                }
            }
        }
        jButton2.setVisible(true);
        jButton1.setVisible(false);
    }
  }
}
